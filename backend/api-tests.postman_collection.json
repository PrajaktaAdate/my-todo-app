{
  "info": {
    "name": "Backend API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Login - Success",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/login", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["login"] },
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"test@task.com\",\n  \"password\": \"task@123\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has token\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login - Failure",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/login", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["login"] },
        "body": { "mode": "raw", "raw": "{\n  \"email\": \"wrong@user.com\",\n  \"password\": \"wrongpass\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Items - Unauthorized",
      "request": {
        "method": "GET",
        "url": { "raw": "http://localhost:4000/items", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Items - Success",
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" }
        ],
        "url": { "raw": "http://localhost:4000/items", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(Array.isArray(jsonData)).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Item - Success",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/items", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items"] },
        "body": { "mode": "raw", "raw": "{\n  \"text\": \"Buy milk\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Response has id, text, completed\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData).to.have.property('completed');",
              "    pm.environment.set('createdId', jsonData.id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Item - Missing Text",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/items", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items"] },
        "body": { "mode": "raw", "raw": "{ }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Item - Not Found",
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/items/999", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items", "999"] },
        "body": { "mode": "raw", "raw": "{\n  \"text\": \"Updated\"\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Item - Success",
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" },
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": { "raw": "http://localhost:4000/items/{{createdId}}", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items", "{{createdId}}"] },
        "body": { "mode": "raw", "raw": "{\n  \"text\": \"Buy almond milk\",\n  \"completed\": true\n}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has id, text, completed\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData).to.have.property('completed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Item - Not Found",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" }
        ],
        "url": { "raw": "http://localhost:4000/items/999", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items", "999"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "pm.test(\"Response has error\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Item - Success",
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer mock-token" }
        ],
        "url": { "raw": "http://localhost:4000/items/{{createdId}}", "protocol": "http", "host": ["localhost"], "port": "4000", "path": ["items", "{{createdId}}"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has id, text, completed\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData).to.have.property('completed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
} 